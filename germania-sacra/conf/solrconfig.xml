<?xml version="1.0" encoding="UTF-8"?>
<!--
	Solr configuration for Germania Sacra index.

	Originally based on example configuration from Solr distribution.

	2013 Sven-S. Porst, SUB GÃ¶ttingen <porst@sub.uni-goettingen.de>
-->

<!--
     For more details about configurations options that may appear in
     this file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
	<!-- Controls what version of Lucene various components of Solr
	     adhere to.  Generally, you want to use the latest version to
	     get all bug fixes and improvements. It is highly recommended
	     that you fully re-index after changing this setting as it can
	     affect both how text is indexed and queried.
	-->
	<luceneMatchVersion>LUCENE_42</luceneMatchVersion>

	<!-- A 'dir' option by itself adds any files found in the directory
	     to the classpath, this is useful for including all jars in a
	     directory.
	     When a 'regex' is specified in addition to a 'dir', only the
	     files in that directory which completely match the regex
	     (anchored on both ends) will be included.
	     The examples below can be used to load some solr-contribs along
	     with their external dependencies.
	-->

	<lib dir="../../../contrib/extraction/lib" regex=".*\.jar"/>
	<lib dir="../../../dist/" regex="apache-solr-cell-\d.*\.jar"/>

	<lib dir="../../../contrib/clustering/lib/" regex=".*\.jar"/>
	<lib dir="../../../dist/" regex="apache-solr-clustering-\d.*\.jar"/>

	<lib dir="../../../contrib/langid/lib/" regex=".*\.jar"/>
	<lib dir="../../../dist/" regex="apache-solr-langid-\d.*\.jar"/>

	<lib dir="../../../contrib/velocity/lib" regex=".*\.jar"/>
	<lib dir="../../../dist/" regex="apache-solr-velocity-\d.*\.jar"/>

	<!-- Data Directory

	     Used to specify an alternate directory to hold all index data
	     other than the default ./data under the Solr home.  If
	     replication is in use, this should match the replication
	     configuration.
	-->
	<dataDir>${solr.data.dir:}</dataDir>


	<!-- The DirectoryFactory to use for indexes.

	     solr.StandardDirectoryFactory is filesystem
	     based and tries to pick the best implementation for the current
	     JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
	     wraps solr.StandardDirectoryFactory and caches small files in memory
	     for better NRT performance.

	     One can force a particular implementation via solr.MMapDirectoryFactory,
	     solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

	     solr.RAMDirectoryFactory is memory based, not
	     persistent, and doesn't work with replication.
	-->
	<directoryFactory name="DirectoryFactory"
	                  class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>



	<!-- The default high-performance update handler -->
	<updateHandler class="solr.DirectUpdateHandler2">

		<!-- AutoCommit

		     Perform a hard commit automatically under certain conditions.
		     Instead of enabling autoCommit, consider using "commitWithin"
		     when adding documents.

		     http://wiki.apache.org/solr/UpdateXmlMessages

		     maxDocs - Maximum number of documents to add since the last
		               commit before automatically triggering a new commit.
		     maxTime - Maximum amount of time in ms that is allowed to pass
		               since a document was added before automaticly
		               triggering a new commit.
		     openSearcher - if false, the commit causes recent index changes
		     to be flushed to stable storage, but does not cause a new
		     searcher to be opened to make those changes visible.
		-->
		<autoCommit>
			<maxTime>15000</maxTime>
			<openSearcher>false</openSearcher>
		</autoCommit>

	<!-- Enables a transaction log, currently used for real-time get.
		 "dir" - the target directory for transaction logs, defaults to the
		 solr data directory.
	-->
		<updateLog>
			<str name="dir">${solr.data.dir:}</str>
		</updateLog>
	</updateHandler>


	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	     Query section - these settings control query time things like caches
	     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<query>
		<!-- Max Boolean Clauses

		     Maximum number of clauses in each BooleanQuery,  an exception
		     is thrown if exceeded.

		     ** WARNING **

		     This option actually modifies a global Lucene property that
		     will affect all SolrCores.  If multiple solrconfig.xml files
		     disagree on this property, the value at any given moment will
		     be based on the last SolrCore to be initialized.
		-->
		<maxBooleanClauses>1024</maxBooleanClauses>


		<!-- Solr Internal Query Caches

		     There are two implementations of cache available for Solr,
		     LRUCache, based on a synchronized LinkedHashMap, and
		     FastLRUCache, based on a ConcurrentHashMap.

		     FastLRUCache has faster gets and slower puts in single
		     threaded operation and thus is generally faster than LRUCache
		     when the hit ratio of the cache is high (> 75%), and may be
		     faster under other scenarios on multi-cpu systems.
		-->

		<!-- Filter Cache

		     Cache used by SolrIndexSearcher for filters (DocSets),
		     unordered sets of *all* documents that match a query.  When a
		     new searcher is opened, its caches may be prepopulated or
		     "autowarmed" using data from caches in the old searcher.
		     autowarmCount is the number of items to prepopulate.  For
		     LRUCache, the autowarmed items will be the most recently
		     accessed items.

		     Parameters:
		       class - the SolrCache implementation LRUCache or
		           (LRUCache or FastLRUCache)
		       size - the maximum number of entries in the cache
		       initialSize - the initial capacity (number of entries) of
		           the cache.  (see java.util.HashMap)
		       autowarmCount - the number of entries to prepopulate from
		           and old cache.
		-->
		<filterCache class="solr.FastLRUCache"
		             size="512"
		             initialSize="512"
		             autowarmCount="0"/>

		<!-- Query Result Cache

		     Caches results of searches - ordered lists of document ids
		     (DocList) based on a query, a sort, and the range of documents requested.
		-->
		<queryResultCache class="solr.LRUCache"
		                 size="512"
		                 initialSize="512"
		                 autowarmCount="0"/>

		<!-- Document Cache

		     Caches Lucene Document objects (the stored fields for each
		     document).  Since Lucene internal document ids are transient,
		     this cache will not be autowarmed.
		-->
		<documentCache class="solr.LRUCache"
		               size="512"
		               initialSize="512"
		               autowarmCount="0"/>

		<!-- Lazy Field Loading

		     If true, stored fields that are not requested will be loaded
		     lazily.  This can result in a significant speed improvement
		     if the usual case is to not load all stored fields,
		     especially if the skipped fields are large compressed text
		     fields.
		-->
		<enableLazyFieldLoading>true</enableLazyFieldLoading>

		<!-- Result Window Size

		    An optimization for use with the queryResultCache.  When a search
		    is requested, a superset of the requested number of document ids
		    are collected.  For example, if a search for a particular query
		    requests matching documents 10 through 19, and queryWindowSize is 50,
		    then documents 0 through 49 will be collected and cached.  Any further
		    requests in that range can be satisfied via the cache.
		-->
		<queryResultWindowSize>20</queryResultWindowSize>

		<!-- Maximum number of documents to cache for any entry in the
		    queryResultCache.
		-->
		<queryResultMaxDocsCached>200</queryResultMaxDocsCached>

		<!-- Query Related Event Listeners

		    Various IndexSearcher related events can trigger Listeners to
		    take actions.

		    newSearcher - fired whenever a new searcher is being prepared
		    and there is a current searcher handling requests (aka
		    registered).  It can be used to prime certain caches to
		    prevent long request times for certain requests.

		    firstSearcher - fired whenever a new searcher is being
		    prepared but there is no current registered searcher to handle
		    requests or to gain autowarming data from.
		 -->
		<!-- QuerySenderListener takes an array of NamedList and executes a
		     local query request for each NamedList in sequence.
		-->
		<listener event="newSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<!--
				<lst><str name="q">solr</str><str name="sort">price asc</str></lst>
				<lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
				-->
			</arr>
		</listener>
		<listener event="firstSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<lst>
			  	  <str name="q">static firstSearcher warming in solrconfig.xml</str>
				</lst>
			</arr>
		</listener>

		<!-- Use Cold Searcher

		     If a search request comes in and there is no current
		     registered searcher, then immediately register the still
		     warming searcher and use it.  If "false" then all requests
		     will block until the first searcher is done warming.
		-->
		<useColdSearcher>false</useColdSearcher>

		<!-- Max Warming Searchers

		     Maximum number of searchers that may be warming in the
		     background concurrently.  An error is returned if this limit
		     is exceeded.

		     Recommend values of 1-2 for read-only slaves, higher for
		     masters w/o cache warming.
		-->
		<maxWarmingSearchers>2</maxWarmingSearchers>

	</query>



	<!-- Request Dispatcher

	   This section contains instructions for how the SolrDispatchFilter
	   should behave when processing requests for this SolrCore.

	   handleSelect is a legacy option that affects the behavior of requests
	   such as /select?qt=XXX

	   handleSelect="true" will cause the SolrDispatchFilter to process
	   the request and dispatch the query to a handler specified by the
	   "qt" param, assuming "/select" isn't already registered.

	   handleSelect="false" will cause the SolrDispatchFilter to
	   ignore "/select" requests, resulting in a 404 unless a handler
	   is explicitly registered with the name "/select"

	   handleSelect="true" is not recommended for new users, but is the default
	   for backwards compatibility
	-->
	<requestDispatcher handleSelect="false">
		<!-- Request Parsing

		     These settings indicate how Solr Requests may be parsed, and
		     what restrictions may be placed on the ContentStreams from
		     those requests

		     enableRemoteStreaming - enables use of the stream.file
		     and stream.url parameters for specifying remote streams.

		     multipartUploadLimitInKB - specifies the max size of
		     Multipart File Uploads that Solr will allow in a Request.

		     *** WARNING ***
		     The settings below authorize Solr to fetch remote files, You
		     should make sure your system has some authentication before
		     using enableRemoteStreaming="true"
		  -->
		<requestParsers enableRemoteStreaming="true"
		                multipartUploadLimitInKB="2048000"/>

		<!-- HTTP Caching

		     Set HTTP caching related parameters (for proxy caches and clients).

		     The options below instruct Solr not to output any HTTP Caching
		     related headers
		-->
		<httpCaching never304="true"/>
	</requestDispatcher>



	<!-- Request Handlers

	   http://wiki.apache.org/solr/SolrRequestHandler

	   Incoming queries will be dispatched to a specific handler by name
	   based on the path specified in the request.

	   Legacy behavior: If the request path uses "/select" but no Request
	   Handler has that name, and if handleSelect="true" has been specified in
	   the requestDispatcher, then the Request Handler is dispatched based on
	   the qt parameter.  Handlers without a leading '/' are accessed this way
	   like so: http://host/app/[core/]select?qt=name  If no qt is
	   given, then the requestHandler that declares default="true" will be
	   used or the one named "standard".

	   If a Request Handler is declared with startup="lazy", then it will
	   not be initialized until the first request that uses it.
	-->
	<!-- SearchHandler

	     http://wiki.apache.org/solr/SearchHandler

	     For processing Search Queries, the primary Request Handler
	     provided with Solr is "SearchHandler" It delegates to a sequent
	     of SearchComponents (see below) and supports distributed
	     queries across multiple shards
	-->
	<requestHandler name="/select" class="solr.SearchHandler">
		<!-- default values for query parameters can be specified, these
		     will be overridden by parameters in the request
		-->
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<int name="rows">10</int>
			<str name="df">text</str>
		</lst>
	</requestHandler>


	<!-- A request handler that returns indented JSON by default -->
	<requestHandler name="/query" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
			<str name="df">text</str>
		</lst>
	</requestHandler>


	<!-- realtime get handler, guaranteed to return the latest stored fields of
	     any document, without the need to commit or open a new searcher.  The
	     current implementation relies on the updateLog feature being enabled. -->
	<requestHandler name="/get" class="solr.RealTimeGetHandler">
		<lst name="defaults">
			<str name="omitHeader">true</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
	 	</lst>
	</requestHandler>


	<!-- A Robust Example

	     This example SearchHandler declaration shows off usage of the
	     SearchHandler with many defaults declared

	     Note that multiple instances of the same Request Handler
	     (SearchHandler) can be registered multiple times with different
	     names (and different init parameters)
	-->
	<requestHandler name="/browse" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>

			<!-- VelocityResponseWriter settings -->
			<str name="wt">velocity</str>
			<str name="v.template">browse</str>
			<str name="v.layout">layout</str>
			<str name="title">Solritas</str>

			<!-- Query settings -->
			<str name="defType">edismax</str>
			<str name="qf">
				text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
				title^10.0 description^5.0 keywords^5.0 author^2.0 resourcename^1.0
			</str>
			<str name="df">text</str>
			<str name="mm">100%</str>
			<str name="q.alt">*:*</str>
			<str name="rows">10</str>
			<str name="fl">*,score</str>

			<str name="mlt.qf">
				text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
				title^10.0 description^5.0 keywords^5.0 author^2.0 resourcename^1.0
			</str>
			<str name="mlt.fl">text,features,name,sku,id,manu,cat,title,description,keywords,author,resourcename</str>
			<int name="mlt.count">3</int>

			<!-- Faceting defaults -->
			<str name="facet">on</str>
			<str name="facet.field">cat</str>
			<str name="facet.field">manu_exact</str>
			<str name="facet.field">content_type</str>
			<str name="facet.field">author_s</str>
			<str name="facet.query">ipod</str>
			<str name="facet.query">GB</str>
			<str name="facet.mincount">1</str>
			<str name="facet.pivot">cat,inStock</str>
			<str name="facet.range.other">after</str>
			<str name="facet.range">price</str>
			<int name="f.price.facet.range.start">0</int>
			<int name="f.price.facet.range.end">600</int>
			<int name="f.price.facet.range.gap">50</int>
			<str name="facet.range">popularity</str>
			<int name="f.popularity.facet.range.start">0</int>
			<int name="f.popularity.facet.range.end">10</int>
			<int name="f.popularity.facet.range.gap">3</int>
			<str name="facet.range">manufacturedate_dt</str>
			<str name="f.manufacturedate_dt.facet.range.start">NOW/YEAR-10YEARS</str>
			<str name="f.manufacturedate_dt.facet.range.end">NOW</str>
			<str name="f.manufacturedate_dt.facet.range.gap">+1YEAR</str>
			<str name="f.manufacturedate_dt.facet.range.other">before</str>
			<str name="f.manufacturedate_dt.facet.range.other">after</str>

			<!-- Highlighting defaults -->
			<str name="hl">on</str>
			<str name="hl.fl">content features title name</str>
			<str name="hl.encoder">html</str>
			<str name="hl.simple.pre">&lt;b&gt;</str>
			<str name="hl.simple.post">&lt;/b&gt;</str>
			<str name="f.title.hl.fragsize">0</str>
			<str name="f.title.hl.alternateField">title</str>
			<str name="f.name.hl.fragsize">0</str>
			<str name="f.name.hl.alternateField">name</str>
			<str name="f.content.hl.snippets">3</str>
			<str name="f.content.hl.fragsize">200</str>
			<str name="f.content.hl.alternateField">content</str>
			<str name="f.content.hl.maxAlternateFieldLength">750</str>

			<!-- Spell checking defaults -->
			<str name="spellcheck">on</str>
			<str name="spellcheck.extendedResults">false</str>
			<str name="spellcheck.count">5</str>
			<str name="spellcheck.alternativeTermCount">2</str>
			<str name="spellcheck.maxResultsForSuggest">5</str>
			<str name="spellcheck.collate">true</str>
			<str name="spellcheck.collateExtendedResults">true</str>
			<str name="spellcheck.maxCollationTries">5</str>
			<str name="spellcheck.maxCollations">3</str>
		</lst>

	 <!-- append spellchecking to our list of components -->
		<arr name="last-components">
			<str>spellcheck</str>
		</arr>
	</requestHandler>


	<!-- Update Request Handler.

	     http://wiki.apache.org/solr/UpdateXmlMessages

	     The canonical Request Handler for Modifying the Index through
	     commands specified using XML, JSON, CSV, or JAVABIN

	     Note: Since solr1.1 requestHandlers requires a valid content
	     type header if posted in the body. For example, curl now
	     requires: -H 'Content-type:text/xml; charset=utf-8'

	     To override the request content type and force a specific
	     Content-type, use the request parameter:
	       ?update.contentType=text/csv

	     This handler will pick a response format to match the input
	     if the 'wt' parameter is not explicit
	-->
	<requestHandler name="/update" class="solr.UpdateRequestHandler">
		<!-- See below for information on defining
		     updateRequestProcessorChains that can be used by name
		     on each Update Request
		-->
		<!--
			<lst name="defaults">
				<str name="update.chain">dedupe</str>
			</lst>
		-->
	</requestHandler>



	<!-- Solr Cell Update Request Handler

	     http://wiki.apache.org/solr/ExtractingRequestHandler
	-->
	<requestHandler name="/update/extract"
	                startup="lazy"
	                class="solr.extraction.ExtractingRequestHandler">
		<lst name="defaults">
			<str name="lowernames">true</str>
			<str name="uprefix">ignored_</str>

			<!-- capture link hrefs but ignore div attributes -->
			<str name="captureAttr">true</str>
			<str name="fmap.a">links</str>
			<str name="fmap.div">ignored_</str>
		</lst>
	</requestHandler>



	<!-- Field Analysis Request Handler

	     RequestHandler that provides much the same functionality as
	     analysis.jsp. Provides the ability to specify multiple field
	     types and field names in the same request and outputs
	     index-time and query-time analysis for each of them.

	     Request parameters are:
	     analysis.fieldname - field name whose analyzers are to be used

	     analysis.fieldtype - field type whose analyzers are to be used
	     analysis.fieldvalue - text for index-time analysis
	     q (or analysis.q) - text for query time analysis
	     analysis.showmatch (true|false) - When set to true and when
	         query analysis is performed, the produced tokens of the
	         field value analysis will be marked as "matched" for every
	         token that is produces by the query analysis
	-->
	<requestHandler name="/analysis/field"
	                startup="lazy"
	                class="solr.FieldAnalysisRequestHandler"/>



	<!-- Document Analysis Handler

	     http://wiki.apache.org/solr/AnalysisRequestHandler

	     An analysis handler that provides a breakdown of the analysis
	     process of provided documents. This handler expects a (single)
	     content stream with the following format:

	     <docs>
	       <doc>
	         <field name="id">1</field>
	         <field name="name">The Name</field>
	         <field name="text">The Text Value</field>
	       </doc>
	       <doc>...</doc>
	       <doc>...</doc>
	       ...
	     </docs>

	     Note: Each document must contain a field which serves as the
	     unique key. This key is used in the returned response to associate
	     an analysis breakdown to the analyzed document.

	     Like the FieldAnalysisRequestHandler, this handler also supports
	     query analysis by sending either an "analysis.query" or "q"
	     request parameter that holds the query text to be analyzed. It
	     also supports the "analysis.showmatch" parameter which when set to
	     true, all field tokens that match the query tokens will be marked
	     as a "match".
	-->
	<requestHandler name="/analysis/document"
	                class="solr.DocumentAnalysisRequestHandler"
	                startup="lazy"/>



	<!-- Admin Handlers

	   Admin Handlers - This will register all the standard admin
	   RequestHandlers.
	-->
	<requestHandler name="/admin/"
	              class="solr.admin.AdminHandlers"/>
	<!-- This single handler is equivalent to the following... -->
	<!--
	 <requestHandler name="/admin/luke"       class="solr.admin.LukeRequestHandler"/>
	 <requestHandler name="/admin/system"     class="solr.admin.SystemInfoHandler"/>
	 <requestHandler name="/admin/plugins"    class="solr.admin.PluginInfoHandler"/>
	 <requestHandler name="/admin/threads"    class="solr.admin.ThreadDumpHandler"/>
	 <requestHandler name="/admin/properties" class="solr.admin.PropertiesRequestHandler"/>
	 <requestHandler name="/admin/file"       class="solr.admin.ShowFileRequestHandler"/>
	-->



	<!-- ping/healthcheck -->
	<requestHandler name="/admin/ping" class="solr.PingRequestHandler">
		<lst name="invariants">
			<str name="q">solrpingquery</str>
		</lst>
		<lst name="defaults">
			<str name="echoParams">all</str>
		</lst>
		<!-- An optional feature of the PingRequestHandler is to configure the
		     handler with a "healthcheckFile" which can be used to enable/disable
		     the PingRequestHandler.
		     relative paths are resolved against the data dir
		-->
		<!-- <str name="healthcheckFile">server-enabled.txt</str> -->
	</requestHandler>



	<!-- Echo the request contents back to the client -->
	<requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
		<lst name="defaults">
			 <str name="echoParams">explicit</str>
			 <str name="echoHandler">true</str>
		</lst>
	</requestHandler>




	<!-- Search Components

		Search components are registered to SolrCore and used by
		instances of SearchHandler (which can access them by name)

		By default, the following components are available:

		<searchComponent name="query"     class="solr.QueryComponent"/>
		<searchComponent name="facet"     class="solr.FacetComponent"/>
		<searchComponent name="mlt"       class="solr.MoreLikeThisComponent"/>
		<searchComponent name="highlight" class="solr.HighlightComponent"/>
		<searchComponent name="stats"     class="solr.StatsComponent"/>
		<searchComponent name="debug"     class="solr.DebugComponent"/>

		Default configuration in a requestHandler would look like:

		<arr name="components">
		 <str>query</str>
		 <str>facet</str>
		 <str>mlt</str>
		 <str>highlight</str>
		 <str>stats</str>
		 <str>debug</str>
		</arr>

		If you register a searchComponent to one of the standard names,
		that will be used instead of the default.

		To insert components before or after the 'standard' components, use:

		<arr name="first-components">
		 <str>myFirstComponentName</str>
		</arr>

		<arr name="last-components">
		 <str>myLastComponentName</str>
		</arr>

		NOTE: The component registered with the name "debug" will
		always be executed after the "last-components"

	-->

	<!-- Suggester
	     Configured for Germania Sacra succestion fields.
	     from: http://wiki.apache.org/solr/Suggester
	-->
	<searchComponent class="solr.SpellCheckComponent" name="spellcheck">
		<lst name="spellchecker">
			<str name="name">suggest</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<!-- Alternatives to lookupImpl:
			     org.apache.solr.spelling.suggest.fst.FSTLookup   [finite state automaton]
			     org.apache.solr.spelling.suggest.fst.WFSTLookupFactory [weighted finite state automaton]
			     org.apache.solr.spelling.suggest.jaspell.JaspellLookup [default, jaspell-based]
			     org.apache.solr.spelling.suggest.tst.TSTLookup   [ternary trees]
			-->
			<str name="field">all_suggest</str>  <!-- the indexed field to derive suggestions from -->
			<float name="threshold">0.0005</float>
			<str name="buildOnCommit">true</str>
		</lst>

		<lst name="spellchecker">
			<str name="name">bistum_suggest</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">bistum_suggest</str>  <!-- the indexed field to derive suggestions from -->
			<float name="threshold">0.0005</float>
			<str name="buildOnCommit">true</str>
		</lst>

		<lst name="spellchecker">
			<str name="name">orden_suggest</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">orden_suggest</str>  <!-- the indexed field to derive suggestions from -->
			<float name="threshold">0.0005</float>
			<str name="buildOnCommit">true</str>
		</lst>
	</searchComponent>

	<requestHandler name="/suggest" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="spellcheck">true</str>
			<str name="spellcheck.dictionary">suggest</str>
			<str name="spellcheck.onlyMorePopular">true</str>
			<str name="spellcheck.count">6</str>
			<str name="spellcheck.collate">true</str>
		</lst>
		<arr name="components">
			<str>spellcheck</str>
		</arr>
	</requestHandler>



	<!-- Term Vector Component

	     http://wiki.apache.org/solr/TermVectorComponent
	-->
	<searchComponent name="tvComponent" class="solr.TermVectorComponent"/>

	<!-- A request handler for demonstrating the term vector component

	     This is purely as an example.

	     In reality you will likely want to add the component to your
	     already specified request handlers.
	-->
	<requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="df">text</str>
			<bool name="tv">true</bool>
		</lst>
		<arr name="last-components">
			<str>tvComponent</str>
		</arr>
	</requestHandler>



	<!-- Terms Component

	     http://wiki.apache.org/solr/TermsComponent

	     A component to return terms and document frequency of those terms.
	-->
	<searchComponent name="terms" class="solr.TermsComponent"/>

	<!-- A request handler for demonstrating the terms component -->
	<requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<bool name="terms">true</bool>
			<bool name="distrib">false</bool>
		</lst>
		<arr name="components">
			<str>terms</str>
		</arr>
	</requestHandler>



	<!-- Query Elevation Component

	     http://wiki.apache.org/solr/QueryElevationComponent

	     a search component that enables you to configure the top
	     results for a given query regardless of the normal lucene
	     scoring.
	-->
	<searchComponent name="elevator" class="solr.QueryElevationComponent">
		<!-- pick a fieldType to analyze queries -->
		<str name="queryFieldType">string</str>
		<str name="config-file">elevate.xml</str>
	</searchComponent>

	<!-- A request handler for demonstrating the elevator component -->
	<requestHandler name="/elevate" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="df">text</str>
		</lst>
		<arr name="last-components">
			<str>elevator</str>
		</arr>
	</requestHandler>



	<!-- Highlighting Component

	     http://wiki.apache.org/solr/HighlightingParameters
	-->
	<searchComponent class="solr.HighlightComponent" name="highlight">
		<highlighting>
			<!-- Configure the standard fragmenter -->
			<!-- This could most likely be commented out in the "default" case -->
			<fragmenter name="gap"
			            default="true"
			            class="solr.highlight.GapFragmenter">
				<lst name="defaults">
				   <int name="hl.fragsize">100</int>
				</lst>
			</fragmenter>

			<!-- A regular-expression-based fragmenter
			     (for sentence extraction)
			-->
			<fragmenter name="regex"
			            class="solr.highlight.RegexFragmenter">
				<lst name="defaults">
					<!-- slightly smaller fragsizes work better because of slop -->
					<int name="hl.fragsize">70</int>
					<!-- allow 50% slop on fragment sizes -->
					<float name="hl.regex.slop">0.5</float>
					<!-- a basic sentence pattern -->
					<str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
				</lst>
			</fragmenter>

			<!-- Configure the standard formatter -->
			<formatter name="html"
			           default="true"
			           class="solr.highlight.HtmlFormatter">
				<lst name="defaults">
					<str name="hl.simple.pre"><![CDATA[<em>]]></str>
					<str name="hl.simple.post"><![CDATA[</em>]]></str>
				</lst>
			</formatter>

			<!-- Configure the standard encoder -->
			<encoder name="html"
			         class="solr.highlight.HtmlEncoder"/>

			<!-- Configure the standard fragListBuilder -->
			<fragListBuilder name="simple"
			                 class="solr.highlight.SimpleFragListBuilder"/>

			<!-- Configure the single fragListBuilder -->
			<fragListBuilder name="single"
			                 class="solr.highlight.SingleFragListBuilder"/>

			<!-- Configure the weighted fragListBuilder -->
			<fragListBuilder name="weighted"
			                 default="true"
			                 class="solr.highlight.WeightedFragListBuilder"/>

			<!-- default tag FragmentsBuilder -->
			<fragmentsBuilder name="default"
			                  default="true"
			                  class="solr.highlight.ScoreOrderFragmentsBuilder">
			    <!--
			    <lst name="defaults">
			      <str name="hl.multiValuedSeparatorChar">/</str>
			    </lst>
			    -->
			</fragmentsBuilder>

			<!-- multi-colored tag FragmentsBuilder -->
			<fragmentsBuilder name="colored"
			                  class="solr.highlight.ScoreOrderFragmentsBuilder">
				<lst name="defaults">
					<str name="hl.tag.pre"><![CDATA[
						<b style="background:yellow">,<b style="background:lawgreen">,
						<b style="background:aquamarine">,<b style="background:magenta">,
						<b style="background:palegreen">,<b style="background:coral">,
						<b style="background:wheat">,<b style="background:khaki">,
						<b style="background:lime">,<b style="background:deepskyblue">]]></str>
					<str name="hl.tag.post"><![CDATA[</b>]]></str>
				</lst>
			</fragmentsBuilder>

			<boundaryScanner name="default"
			                 default="true"
			                 class="solr.highlight.SimpleBoundaryScanner">
				<lst name="defaults">
					<str name="hl.bs.maxScan">10</str>
					<str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
				</lst>
			</boundaryScanner>

			<boundaryScanner name="breakIterator"
			                 class="solr.highlight.BreakIteratorBoundaryScanner">
				<lst name="defaults">
					<!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
					<str name="hl.bs.type">WORD</str>
					<!-- language and country are used when constructing Locale object.  -->
					<!-- And the Locale object will be used when getting instance of BreakIterator -->
					<str name="hl.bs.language">en</str>
					<str name="hl.bs.country">US</str>
				</lst>
			</boundaryScanner>
		</highlighting>
	</searchComponent>



	<!-- XSLT response writer transforms the XML output by any xslt file found
	     in Solr's conf/xslt directory.  Changes to xslt files are checked for
	     every xsltCacheLifetimeSeconds.
	-->
	<queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
		<int name="xsltCacheLifetimeSeconds">5</int>
	</queryResponseWriter>

</config>
